(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[222],{468:function(e,o,n){Promise.resolve().then(n.bind(n,668))},668:function(e,o,n){"use strict";n.r(o),n.d(o,{default:function(){return g},dynamic:function(){return u}});var t=n(7437),r=n(2265),c=n(6443),a=n(5749),l=n(9376),s=n(5951),i=n.n(s);let m=(0,n(166).default)(()=>Promise.all([n.e(364),n.e(257)]).then(n.bind(n,6088)).then(e=>{let{Chessboard:o}=e;return o}),{ssr:!1,loading:()=>(0,t.jsx)("div",{className:i().loadingBoard,children:"Loading Chess Board..."})}),u="force-dynamic";function g(){let[e,o]=(0,r.useState)(new c.qQ),[n,s]=(0,r.useState)("white"),[u,g]=(0,r.useState)(""),[d,f]=(0,r.useState)(null),_=(0,r.useRef)(null),p=(0,l.useSearchParams)().get("room");return((0,r.useEffect)(()=>{if(!p)return;let n=(0,a.z)();return _.current=n,n.removeAllListeners(),n.on("connect",()=>{console.log("Connected to game socket"),n.emit("join_game_room",p)}),n.on("disconnect",()=>{console.log("Disconnected from game socket"),g("Disconnected. Reconnecting...")}),n.on("connect_error",e=>{console.error("Connection error:",e),g("Connection error. Retrying...")}),n.on("player_color",e=>{console.log("Received color:",e),s(e)}),n.on("game_status",e=>{let{status:o,white:n,black:t}=e;console.log("Game status update:",{status:o,white:n,black:t}),"spectating"===o?g("You are spectating this game"):"waiting"===o?g("Waiting for opponent..."):"in_progress"===o&&g("Game in progress")}),n.on("move_accepted",e=>{let{from:t,to:r,gameState:a}=e;if(console.log("\nMove accepted by server:"),console.log("From:",t),console.log("To:",r),console.log("Game state:",a),f(null),!a){console.error("No game state received with move acceptance"),n.emit("request_game_state",p);return}try{let e=new c.qQ;e.load(a),console.log("Successfully updated game state after move acceptance"),console.log("New game FEN:",e.fen()),o(e)}catch(e){console.error("Failed to load game state from server:",a),n.emit("request_game_state",p);return}}),n.on("move",e=>{let{from:t,to:r,gameState:a,playerId:l}=e;if(console.log("\nReceived opponent move:"),console.log("From:",t),console.log("To:",r),console.log("Game state:",a),console.log("Player ID:",l),!a){console.error("No game state received with opponent move"),n.emit("request_game_state",p);return}try{let e=new c.qQ;e.load(a),console.log("Successfully updated game state from opponent move"),console.log("New game FEN:",e.fen()),o(e)}catch(e){console.error("Error updating game state from opponent move:",e),n.emit("request_game_state",p)}}),n.on("move_error",e=>{let{message:o}=e;console.error("Move error:",o),f(null),n.emit("request_game_state",p)}),n.on("game_state",n=>{console.log("\nReceived game state update:"),console.log("New state:",n),console.log("Current state:",e.fen());try{let e=new c.qQ(n);o(e)}catch(e){console.error("Error updating game state:",e)}}),n.on("error",e=>{console.error("Socket error:",e),g("Error: ".concat(e))}),n.connected?n.emit("join_game_room",p):n.connect(),()=>{console.log("Cleaning up game component"),_.current&&(_.current.emit("leave_game_room",p),_.current.removeAllListeners())}},[p]),(0,r.useEffect)(()=>{e.isCheckmate()?g("Checkmate! ".concat("w"===e.turn()?"Black":"White"," wins!")):e.isDraw()?g("Draw!"):e.isStalemate()?g("Stalemate!"):e.isCheck()?g("Check! ".concat("w"===e.turn()?"White":"Black"," to move")):g("".concat("w"===e.turn()?"White":"Black"," to move"))},[e]),p)?(0,t.jsxs)("div",{className:i().gameContainer,children:[(0,t.jsx)("div",{className:i().boardContainer,children:(0,t.jsx)(m,{id:"BasicBoard",position:e.fen(),onPieceDrop:function(t,r){if(console.log("\nAttempting move:"),console.log("From:",t),console.log("To:",r),console.log("Current turn:",e.turn()),console.log("Player color:",n),console.log("Current FEN:",e.fen()),"w"===e.turn()&&"white"!==n||"b"===e.turn()&&"black"!==n)return console.log("Not player's turn"),!1;try{let n=new c.qQ(e.fen()),a=n.move({from:t,to:r,promotion:"q"});if(null===a)return console.log("Invalid move"),!1;if(console.log("Move is valid, sending to server"),!_.current)return console.error("Socket connection not available"),!1;{let e={room:p,from:t,to:r,gameState:n.fen(),playerId:_.current.id};return console.log("\nEmitting move:",e),f({from:t,to:r}),o(n),_.current.emit("move",e),!0}}catch(e){return console.error("Error validating move:",e),!1}},boardOrientation:n})}),(0,t.jsxs)("div",{className:i().gameInfo,children:[(0,t.jsxs)("h2",{children:["Room: ",p]}),(0,t.jsxs)("p",{children:["Playing as: ",n]}),(0,t.jsx)("p",{className:i().status,children:u})]})]}):(0,t.jsx)("div",{className:i().error,children:"Invalid room ID"})}},5749:function(e,o,n){"use strict";n.d(o,{h:function(){return l},z:function(){return a}});var t=n(8680);let r=null,c=0,a=()=>(r||((r=(0,t.io)("http://localhost:3001",{transports:["websocket"],reconnection:!0,reconnectionAttempts:3,reconnectionDelay:1e3,timeout:5e3,autoConnect:!1})).on("connect_error",e=>{console.error("Socket connection error:",e),++c>=3&&(console.error("Max connection attempts reached"),null==r||r.disconnect(),r=null,c=0)}),r.on("connect",()=>{console.log("Socket connected successfully"),c=0}),r.on("disconnect",e=>{console.log("Socket disconnected:",e)})),r&&!r.connected&&(console.log("Attempting to connect socket..."),r.connect()),r),l=()=>r&&r.connected?r:null},5951:function(e){e.exports={gameContainer:"game_gameContainer__LW38N",boardContainer:"game_boardContainer__xp3dA",loadingBoard:"game_loadingBoard__MjclE",gameInfo:"game_gameInfo__sbXXa",status:"game_status__w98NB",error:"game_error__PEUsh"}}},function(e){e.O(0,[740,721,363,971,117,744],function(){return e(e.s=468)}),_N_E=e.O()}]);